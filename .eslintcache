[{"/home/rmeissner/projects/transaction-decoder/src/App.tsx":"1"},{"size":5594,"mtime":1612144493460,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1ucasif","/home/rmeissner/projects/transaction-decoder/src/App.tsx",["7","8","9"],"import React, { useCallback, useState } from 'react';\nimport { TextField } from '@material-ui/core';\nimport MuiAccordion from '@material-ui/core/Accordion';\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\nimport { makeStyles, withStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport axios from 'axios';\nimport { FunctionFragment, Interface, Result } from '@ethersproject/abi';\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst Accordion = withStyles({\n  root: {\n    border: '1px solid rgba(0, 0, 0, .125)',\n    boxShadow: 'none',\n    '&:not(:last-child)': {\n      borderBottom: 0,\n    },\n    '&:before': {\n      display: 'none',\n    },\n  },\n  expanded: {},\n})(MuiAccordion);\n\nconst AccordionSummary = withStyles({\n  root: {\n    backgroundColor: 'rgba(0, 0, 0, .03)',\n    borderBottom: '1px solid rgba(0, 0, 0, .125)',\n    marginBottom: -1,\n    minHeight: 56,\n    '&$expanded': {\n      minHeight: 56,\n    },\n  },\n  content: {},\n  expanded: {},\n})(MuiAccordionSummary);\n\nconst AccordionDetails = withStyles((theme) => ({\n  root: {\n    flexDirection: \"column\"\n  },\n}))(MuiAccordionDetails);\n\nconst useStyles = makeStyles(() => ({\n  content: {\n    padding: \"4px\"\n  },\n  input: {\n    width: \"100%\"\n  },\n  values: {\n    padding: \"4px 16px 4px 16px\",\n    display: \"block\",\n    wordBreak: \"break-all\",\n  }\n}));\n\ninterface DecodedValue {\n  label?: string,\n  value: any,\n  decoded?: Decoded\n}\n\ninterface Decoded {\n  label: string,\n  params: DecodedValue[]\n}\n\nconst signatureLookupUrl = \"https://www.4byte.directory/api/v1/signatures/?hex_signature=\"\nconst defaultInterface = new Interface([])\n\nconst decodeData = async (data: string): Promise<Decoded | undefined> => {\n  if (!data || data.length == 0) return undefined\n  const signature = data.slice(0, 10)\n  const lookup = await axios.get(signatureLookupUrl + signature)\n  if (lookup.data.results.length == 0) return undefined\n  const functionSignature = lookup.data.results[0].text_signature\n  const functionFragment = FunctionFragment.fromString(functionSignature)\n  const decoded = defaultInterface.decodeFunctionData(functionFragment, data)\n  const params = await processDecoded(functionFragment, decoded)\n  return {\n    label: functionSignature,\n    params\n  }\n}\n\nconst processDecoded = async (functionFragment: FunctionFragment, decoded: Result): Promise<DecodedValue[]> => {\n  if (Interface.getSighash(functionFragment).toLocaleLowerCase() === \"0x8d80ff0a\" && decoded.length == 1) {\n    return [await decodeMultisend(decoded[0])]\n  }\n  return decoded.map((param) => { return { value: param } })\n}\n\nconst decodeMultisend = async (multisendData: string): Promise<DecodedValue> => {\n  let index = 2;\n  const params: DecodedValue[] = []\n  while (index < multisendData.length) {\n    const operation = parseInt(multisendData.slice(index, index += 2), 16)\n    const to = \"0x\" + multisendData.slice(index, index += 40)\n    const value = BigNumber.from(\"0x\" + multisendData.slice(index, index += 64)).toHexString()\n    const dataLength = parseInt(multisendData.slice(index, index += 64), 16) * 2\n    const data = \"0x\" + multisendData.slice(index, index += dataLength)\n    params.push({\n      value: undefined,\n      decoded: {\n        label: \"Transaction \" + (params.length + 1),\n        params: [\n          { label: \"Operation\", value: operation },\n          { label: \"To\", value: to },\n          { label: \"Value\", value: value },\n          { label: \"Data\", value: data, decoded: await decodeData(data) }\n        ]\n      }\n    })\n  }\n  return {\n    value: multisendData,\n    decoded: {\n      label: \"Multisend transactions\",\n      params\n    }\n  }\n}\n\nconst renderParams = (classes: any, decoded: Decoded | undefined): any => {\n  if (!decoded) return (<></>)\n  return (<Accordion >\n    <AccordionSummary>{decoded.label}</AccordionSummary>\n    <AccordionDetails>\n      {decoded.params.map(param => (<>\n        {param.label !== undefined && (\n          <b>{param.label}</b>\n        )}\n        {param.value !== undefined && (\n          <span className={classes.values}>\n            {param.value.toString()}\n          </span>\n        )}\n        {renderParams(classes, param.decoded)}\n      </>)\n      )}\n    </AccordionDetails>\n  </Accordion >)\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [txData, setTxData] = useState(\"\")\n  const [decoded, setDecoded] = useState<Decoded | undefined>(undefined)\n  const decodeTxData = useCallback(async (data: string) => {\n    setTxData(data)\n    console.log({ data })\n    try {\n      setDecoded(await decodeData(data))\n    } catch (e) {\n      setDecoded(undefined)\n      console.error(e)\n    }\n  }, [])\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(() => createMuiTheme({\n    palette: {\n      type: prefersDarkMode ? 'dark' : 'light',\n      primary: blue,\n    },\n  }), [prefersDarkMode])\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.content}>\n        <h1>\n          Transaction decoder\n        </h1>\n        <TextField color=\"primary\" className={classes.input} value={txData} onChange={(e) => { decodeTxData(e.target.value) }} />\n        <br />\n        <br />\n        {renderParams(classes, decoded)}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n",{"ruleId":"10","severity":1,"message":"11","line":78,"column":28,"nodeType":"12","messageId":"13","endLine":78,"endColumn":30},{"ruleId":"10","severity":1,"message":"11","line":81,"column":34,"nodeType":"12","messageId":"13","endLine":81,"endColumn":36},{"ruleId":"10","severity":1,"message":"11","line":93,"column":101,"nodeType":"12","messageId":"13","endLine":93,"endColumn":103},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]